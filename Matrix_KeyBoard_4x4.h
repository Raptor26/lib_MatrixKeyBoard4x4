//******************************************************************************
/*
 * @file    Matrix_KeyBoard_4x4.h
 * @author  Михаил Исаев
 * @version 1.0
 * @date    28.07.2017
 * @brief   header файл для модуля обработки матричной клавиатуры         
 */
//******************************************************************************


/* 
 * MKB4x4 -- сокращение от "MATRIX_KEYBOARD_4X4". Данный постфикс необходим для 
 * гарантии того, что именование константы, объявленые в данном модуле, будут уникальны
 */

#ifndef MATRIX_KEYBOARD_4X4_H
#define	MATRIX_KEYBOARD_4X4_H

//******************************************************************************
// Секция include (подключаем заголовочные файлы используемых модулей)
#include <stdint.h>
//******************************************************************************


//******************************************************************************
// Секция определения констант
// Определяем макисальное количество виртуальным таймеров (колличество 
// подключаемых клавиаутр не может быть больше количества виртуальных таймеров)
#define MAX_VIRT_TMR_MKB4x4                 8    


//==============================================================================
// Определение единици времени
#define MS_MKB4x4                           1
#define SEC_MKB4x4                          (MS_MKB4x4 * 1000)
#define DEBOUNCE_MKB4x4                     (MS_MKB4x4 * 50)
#define FIRST_DELAY_MKB4x4                  (MS_MKB4x4 * 500)
#define AUTO_REPEAT_MKB4x4                  (MS_MKB4x4 * 200)
//==============================================================================
//******************************************************************************


//******************************************************************************
// Секция определения типов

typedef enum {
    NOT_PRESS = 0,
    PRESS = 2,
    DEBONCE = 1,
    FIRST_DELAY = 3,
    AUTO_REPEAT = 4
} FSM_State_MKB4x4; //  Состояния автомата обработки матричной клавиатуры

typedef enum {
    STOP = 0,
    RUNNING = 1,
    PAUSE = 2
} vTMRState_MKB4x4; //  Состояния в которых могут находится виртуальные таймеры

typedef struct {
    // Строки и столбцы объявлены в стурктуре для того чтобы функция опроса клавиатуры
    // продолжала опрос с того места, где была обнаружена нажатая клавиша в предыдущий 
    // момент времени (Не реализованно)
    uint16_t rows;
    uint16_t cols;

    unsigned char keyCode; //               Код нажатой клавишы
    unsigned char _keyCode; //              Код нажатой клавишы в предыдущий момент
    uint16_t id_TMR; //                     Номер виртуального таймера (не должно 
    //                                      превышать значение #define MAX_VIRT_TMR_MKB4x4)

    // Массив указателенй на функцию, возвращающую тим void
    void (*pOutSet[4])(void); //             Массив указателей на функции, устанавливающий "HIGH" на выводах 0-3
    void (*pOutReSet[4])(void); //           Массив указателей на функции, устанавливающий "LOW" на выводах 0-3

    // Массив указателей на функцию, возвращающую тип uint16_t
    uint16_t(*pIn[4])(void); //              Указатель на функцию, считавыющий состояние выводов с 4-7

    //--------------------------------------------------------------------------
    // Массив символов матричной клавиатуры
    unsigned char keyCodeArr[4][4];

    /* Пример (объявлять там, где инициализируется данная структура):
         unsigned char KeyCode [4][4] = {
            {'1', '2', '3', 'A'},
            {'4', '5', '6', 'B'},
            {'7', '8', '9', 'C'},
            {'*', '0', '#', 'D'}
        };
     */
    //--------------------------------------------------------------------------

    FSM_State_MKB4x4 status; //             Статус обработчика нажатия кнопки клавиатуры

    //==========================================================================
    // Объявлено в глобальной области, поэтому закоментированно
    //    vTMRState_MKB4x4 gTMRState[MAX_VIRT_TMR_MKB4x4]; // Массив состояний 
    //    //                                                  виртуальных таймеров
    //==========================================================================
} MKB4x4_Typedef;

//******************************************************************************


//******************************************************************************
// Секция определения глобальных переменных
//extern FSM_State_MKB4x4_TypeDef State_MKB4x4;
//extern uint16_t gTMR_MKB4x4[MAX_VIRT_TMR_MKB4x4];
//extern vTMRState_MKB4x4_TypeDef gTMRState_MKB4x4[MAX_VIRT_TMR_MKB4x4];
//******************************************************************************


//******************************************************************************
// Секция прототипов глобальных функций
//==============================================================================
// Обработчки виртуальных таймеров
extern void IntProcess_vTMR_MKB4x4(void);
//==============================================================================


//==============================================================================
//extern unsigned char KeyPressDetect_MKB4x4(InOut_MKB4x4_Typedef *PORT);
extern unsigned char ProcessKeyFSM_MKB4x4(MKB4x4_Typedef *MKB);
//==============================================================================
//******************************************************************************


//******************************************************************************
// Секция определения макросов
//******************************************************************************

#endif	/* MATRIX_KEYBOARD_4X4_H */

////////////////////////////////////////////////////////////////////////////////
// END OF FILE
////////////////////////////////////////////////////////////////////////////////
